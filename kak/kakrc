# install plug.kak plugin that manages plugins
source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug "robertmeta/plug.kak" noload

plug "andreyorst/fzf.kak" config %{
    map -docstring "enter fzf mode" global user f ": fzf-mode<ret>"
} defer fzf %{
    set-option global fzf_project_use_tilda true
    declare-option str-list fzf_exclude_files "*.o" "*.bin" "*.obj" ".*cleanfiles"
    declare-option str-list fzf_exclude_dirs ".git" ".svn" "rtlrun*"
    set-option global fzf_file_command %sh{
        if [ -n "$(command -v fd)" ]; then
            eval "set -- $kak_quoted_opt_fzf_exclude_files $kak_quoted_opt_fzf_exclude_dirs"
            while [ $# -gt 0 ]; do
                exclude="$exclude --exclude '$1'"
                shift
            done
            cmd="fd . --no-ignore --type f --follow --hidden $exclude"
        else
            eval "set -- $kak_quoted_opt_fzf_exclude_files"
            while [ $# -gt 0 ]; do
                exclude="$exclude -name '$1' -o"
                shift
            done
            eval "set -- $kak_quoted_opt_fzf_exclude_dirs"
            while [ $# -gt 0 ]; do
                exclude="$exclude -path '*/$1' -o"
                shift
            done
            cmd="find . \( ${exclude% -o} \) -prune -o -type f -follow -print"
        fi
        echo "$cmd"
    }
    evaluate-commands %sh{
        if [ -n "$(command -v bat)" ]; then
            echo "set-option global fzf_highlight_command bat"
        fi
    }
    evaluate-commands %sh{
        if [ -n "${kak_opt_grepcmd}" ]; then
            echo "set-option global fzf_sk_grep_command '${kak_opt_grepcmd}'"
        fi
    }
}

# Per-Buffer indendation fallbacks/defaults
hook global BufSetOption filetype=c|cpp %{
    set-option buffer indentwidth 0
    set-option buffer tabstop 8
}
hook global BufSetOption filetype=latex|context %{
    set-option buffer indentwidth 2
    set-option buffer tabstop 4
}
hook global BufSetOption filetype=makefile %{
  set-option buffer indentwidth 0
  set-option buffer tabstop 8
}
hook global BufSetOption filetype=python %{
    set-option buffer indentwidth 4
    set-option buffer tabstop 4
}
hook global BufSetOption filetype=git-commit %{
    set-option buffer autowrap_column 73
}

# Configure tab and backspace key behavior based on previous settings
plug "andreyorst/smarttab.kak" defer smarttab %{
    # set-option global softtabstop 4
} config %{
    hook global BufSetOption filetype=.* %{
        evaluate-commands %sh{
            if [ $kak_opt_indentwidth -ne 0 ]; then
                echo "expandtab"
                echo "set-option buffer softtabstop $kak_opt_indentwidth"
            elif [ $kak_opt_filetype = "gas" ] || [ $kak_opt_filetype = "nasm" ]; then
                echo "noexpandtab"
            else
                echo "smarttab"
            fi
        }
    }
}

# Kakoune Language Server Protocol Client
plug "ul/kak-lsp" do %{
    cargo build --release --locked
    cargo install --force --path .
} config %{
    hook global WinSetOption filetype=(rust|python|c) %{
        lsp-enable-window
    }
    map -docstring "enter lsp mode" global user l ": enter-user-mode lsp<ret>"
}

set-option global startup_info_version 20200901
add-highlighter global/ number-lines -separator " " -hlcursor -min-digits 3
add-highlighter global/ wrap -word

hook global BufSetOption autowrap_column=.* %{
    add-highlighter -override buffer/autowrap_column column %opt{autowrap_column} default,red
}

# delete with D aswell for convenience
map -docstring "delete" global normal D d

# scrolling
map -docstring "scroll down" global normal <c-e> vj
map -docstring "scroll up" global normal <c-y> vk
set-option global scrolloff 2,0

define-command copy-to-clipboard %{ nop %sh{
    [ -n "$TMUX" ] && tmux set-buffer -- "$kak_selection"
    [ -n "$DISPLAY" ] && printf %s "$kak_selection" | xclip -in -selection clipboard >&- 2>&-
}}
map -docstring "copy primary selection to tmux buffer and X11 clipboard" global user y :copy-to-clipboard<ret>

# paste from X11 clipboard
map -docstring "paste before" global user P "!xclip -out -selection clipboard<ret>"
map -docstring "paste after" global user p "<a-!>xclip -out -selection clipboard<ret>"
map -docstring "replace selections" global user R "|xclip -out -selection clipboard<ret>"

# case insensitive search
map -docstring "case insensitive search" global normal / /(?i)
map -docstring "case insensitive backwards search" global normal <a-/> <a-/>(?i)

# ,. to escape instert mode
hook global InsertChar \. %{ try %{
    exec -draft hH <a-k>,\.<ret>d
    exec <esc>
}}

# user mappings
map -docstring "save buffer" global user w :write<ret>

# only show autocomplete options when prompting for them
set-option global autocomplete prompt

# command aliases
alias global bd delete-buffer

define-command -docstring "open a new scratch buffer, not linked to a file" scratch %{ edit -scratch }
alias global s scratch

define-command ide %{
    rename-client main
    set-option global jumpclient main

    new rename-client docs
    set-option global docsclient docs

    new rename-client tools
    set-option global toolsclient tools
}

evaluate-commands %sh{
    [ -n "$TMUX" ] && printf "%s\n" \
        "require-module tmux" \
        "alias global terminal tmux-terminal-vertical"
}
